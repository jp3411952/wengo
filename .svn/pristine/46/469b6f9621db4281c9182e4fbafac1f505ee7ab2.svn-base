/*
创建时间: 2020/08/2020/8/25
作者: Administrator
功能介绍:

*/
package datacenter

import (
	"errors"
	"fmt"
	"github.com/wengo/app/datacenter/dcdbmodel"
	"github.com/wengo/cmdconst"
	"github.com/wengo/cmdconst/cmdaccount"
	"github.com/wengo/dbsys"
	"github.com/wengo/dispatch"
	"github.com/wengo/model/dbmodels"
	"github.com/wengo/msgcode"
	"github.com/wengo/protobuf/pb/account_proto"
	"github.com/wengo/timeutil"
	"github.com/wengo/xlog"
)

type DBAccount struct {
	DBParams  *dispatch.DBEventParam
}

func (this *DBAccount)SetDBEventParam(param  *dispatch.DBEventParam){
	this.DBParams = param
}

func (this *DBAccount)ExcouteQueryFun() error {
	
	regAccout,ok:= this.DBParams.Param.(*dcdbmodel.DB_Req_CreateAccount) //创建
	if !ok {
		return errors.New("DBAccount ExcouteQueryFun 解析对象dcdbmodel.DB_Req_CreateAccount失败")
	}
	//保证账号唯一性
	dbsys.AccountMutex.Lock()
	//这里执行查询
	row,erro := dbsys.GameDB.Query("SELECT * FROM accounts where LoginName = ? ; ",regAccout.Username)
	if erro != nil {
		xlog.ErrorLogNoInScene("DBAccount ExcouteQueryFun Q1 erro = %v", erro)
		this.ErroReturn()
		return erro
	}
	accountData := new(dbmodels.Accounts)
	dbsys.RowToStruct(row, accountData) //解析row
	if accountData.AccountID == 0 {     //没有数据
		err := this.InsertAccountInDB(regAccout, accountData)
		if err != nil {
			return err
		}
	} else {
		this.DBParams.PlyMark.DBResCode = msgcode.RegisterAccountCode_DBIsExsist
	}
	//释放锁
	dbsys.AccountMutex.Unlock()
	//向逻辑线程投递
	if this.DBParams.CbDispSys == nil {
		xlog.DebugLogNoInScene("DBAccount.ExcouteQueryFun 调度事件=nil 或者回调 = nil 就不向逻辑队列投递事件了")
		//出错了要回收数据
		dbsys.PDBParamPool.Recycle(this.DBParams)
		PAccountPool.Recycle(this)
		return nil
	}
	//进入调度队列
	onEventErro := this.DBParams.CbDispSys.PostCustomDBOperateOneRow(&dispatch.DBCustomQueryOneRowData{
		CustomOp: this,
		ToData:   accountData,
	})
	if onEventErro != nil {
		xlog.ErrorLogNoInScene("投递查询事件 %v", onEventErro)
	}
	return onEventErro
}

func (this *DBAccount) InsertAccountInDB(regAccout *dcdbmodel.DB_Req_CreateAccount,accountData *dbmodels.Accounts) error {
	//获取当前时间
	currentNao := timeutil.GetCurrentTimeNano()
	nowTimeStr := timeutil.GetTimeALLStr(currentNao)
	result, erro := dbsys.GameDB.Excute("INSERT INTO accounts(LoginName,LoginPwd,RegisterTime,RegisterIp,Phone) VALUES (?,?,?,?,?)",
		regAccout.Username,
		regAccout.Password,
		nowTimeStr,
		regAccout.ClientIp,
		regAccout.PhoneNum)
	
	if erro != nil {
		xlog.ErrorLogNoInScene("Excute  INSERT INTO accounts erro = %v", erro)
		this.ErroReturn()
		return erro
	}
	lastID, erro := result.LastInsertId()
	if erro != nil {
		xlog.ErrorLogNoInScene("LastInsertId erro = %v", erro)
		this.ErroReturn()
		return erro
	}
	xlog.ErrorLogNoInScene("创建账号ID = %v", lastID)
	logSql := fmt.Sprintf("INSERT INTO accounts_register_record_%s(AccountID,LoginName,LoginPwd,RegisterTime,RegisterIp,Phone) VALUES (?,?,?,?,?,?)", timeutil.GetYearMonthFromatStr(currentNao))
	_, erro = dbsys.LogDB.Excute(logSql,
		lastID,
		regAccout.Username,
		regAccout.Password,
		nowTimeStr,
		regAccout.ClientIp,
		regAccout.PhoneNum)
	if erro != nil {
		xlog.ErrorLogNoInScene("创建账号记录日志失败= %v", erro)
	}
	//再执行查询
	row, erro := dbsys.GameDB.Query("SELECT * FROM accounts where LoginName =? AND LoginPwd =?; ", regAccout.Username, regAccout.Password)
	if erro != nil {
		row.Close()
		xlog.ErrorLogNoInScene("DBAccount ExcouteQueryFun Q2 erro = %v", erro)
		this.ErroReturn()
		return erro
	}
	//解析row
	dbsys.RowToStruct(row, accountData)
	row.Close()
	this.DBParams.PlyMark.DBResCode = msgcode.RegisterAccountCode_Succeed //创建账号成功
	return nil
}

//错误返回
func (this *DBAccount) ErroReturn() {
	//释放锁
	dbsys.AccountMutex.Unlock()
	//出错了要回收数据
	dbsys.PDBParamPool.Recycle(this.DBParams)
	PAccountPool.Recycle(this)
}

func (this *DBAccount) OnQueryOneRowCB(toData interface{}) error  {
	reqCode := &account_proto.RespnRegisterAccoutMsg{
		ClientConnID: this.DBParams.PlyMark.ConnID,
		ResCode: this.DBParams.PlyMark.DBResCode,
	}
	erro := PdataCenter.tcpserver.WritePBMsgByConnID(
		this.DBParams.ServerConnID,
		cmdconst.Main_Account,
		cmdaccount.Sub_DC_LS_RegisterAccount,
		reqCode)
	
	accout,ok := toData.(*dbmodels.Accounts)
	if ok && PaccountMgr.GetAccountByUserName(accout.LoginName) == nil && accout.AccountID > 0 {
		PaccountMgr.AddAccunts(accout)
		xlog.DebugLogNoInScene("OnQueryOneRowCB accout = %v",accout)
	}else {
		xlog.ErrorLogNoInScene("OnQueryOneRowCB 断言 *dbmodels.Accounts 失败")
	}
	//最后回收数据
	dbsys.PDBParamPool.Recycle(this.DBParams)
	PAccountPool.Recycle(this)
	return  erro
}
func (this *DBAccount) Reset(){
	this.DBParams.Reset()
}