/*
创建时间: 2019/11/24
作者: zjy
功能介绍:
登录服
*/

package appclient

import (
	"github.com/golang/protobuf/proto"
	"github.com/wengo/app/netmsgsys"
	"github.com/wengo/appdata"
	"github.com/wengo/cmdconst"
	"github.com/wengo/cmdconst/cmdaccount"
	"github.com/wengo/csvdata"
	"github.com/wengo/dispatch"
	"github.com/wengo/model"
	"github.com/wengo/network"
	"github.com/wengo/protobuf/pb/account_proto"
	"github.com/wengo/timersys"
	"github.com/wengo/xlog"
	"sync"
)

type AppClient struct {
	NetWorkInfo *model.AppNetWorkModel // 服务器网络信息
	netmsgsys   *netmsgsys.NetMsgSys
	conns       sync.Map
	tcpclient   *network.TCPClient
}

// 程序启动
func (this *AppClient) OnStart() {
	this.OnInit()
	dispSys := dispatch.NewDispatchSys(appdata.WorkPool)
	dispSys.SetNetObserver(this) //模拟客户端
	// dispSys.SetServiceNet(this) // 模拟服务器连接
	this.tcpclient = network.NewTCPClient(dispSys, appdata.NetConf, appdata.WorkPool)
	this.tcpclient.Start()
}

// 初始化
func (this *AppClient) OnInit() bool {
	csvdata.LoadCommonCsvData()
	this.netmsgsys = netmsgsys.NewMsgHandler()
	this.RegisterServerMsg()
	return true
}

// 程序运行
func (this *AppClient) OnUpdate() bool {
	// xlog.DebugLog("","run LoginApp")
	
	return true
}

// 关闭
func (this *AppClient) OnRelease() {
	this.tcpclient.Close()
	timersys.Release()
}

func (this *AppClient) OnServiceLink(conn network.Conner) error {
	// conn.WriteOneMsgByConnID(cmdconst.Main_LoginSv, cmdconst.Sub_C_LS_RegisterAccount, sendMsg)
	
	// restcode := &common_proto.RestInt32CodeMsg{
	// 	ResCode:100,
	// }
	// //收到消息回复
	// sendMsg, erro = proto.Marshal(restcode)
	// if erro != nil {
	// 	xlog.DebugLogNoInScene(" ConnMorePackageToOne erro = ",erro)
	// }
	// conn.WriteOneMsgByConnID(cmdconst.Main_LoginSv,cmdconst.Sub_C_LS_Rest,sendMsg)
	return nil
}

func (this *AppClient) OnServiceClose(conn network.Conner) error {
	xlog.DebugLogNoInScene( "AppClient OnServiceClose %v", conn.RemoteAddr())
	return nil
}

func (this *AppClient) OnServiceMsg(msgdata *network.MsgData) error {
	return this.netmsgsys.OnNetWorkMsgHandle(msgdata)
}


//客户端连接
func (this *AppClient)OnNetWorkConnect(conn network.Conner) error{
	xlog.DebugLogNoInScene( "OnNetWorkConnect %v", conn.RemoteAddr())
	
	// 连接成功发送登陆命令
	reqCreateAccount := &account_proto.CL_LS_ReqRegisterAccoutMsg{
		Username: "zjy0822",
		Password: "jp3411952",
		ClientType: model.ClientType_Test,
	}
	sendMsg, erro := proto.Marshal(reqCreateAccount)
	if erro != nil {
		xlog.ErrorLogNoInScene( "OnNetWorkConnect erro %v", erro.Error())
		return erro
	}
	var buf []byte
	// 测试发送多个包
	for i := 1; i > 0; i-- {
		msg, _ := conn.GetOneMsgByteArr(cmdconst.Main_Account, cmdaccount.Sub_C_LS_RegisterAccount, sendMsg)
		buf = append(buf, msg ...)
	}
	erro = conn.WriteMsg(buf)
	if erro != nil {
		xlog.ErrorLog("OnNetWorkConnect write erro %v ", erro.Error())
	}
	return  nil
}

//客户端关闭连接
func (this *AppClient)OnNetWorkClose(conn network.Conner) error{
	return  nil
}

//读取客戶端发来的消息
func (this *AppClient)OnNetWorkRead(msgdata *network.MsgData) error{
	return	this.netmsgsys.OnNetWorkMsgHandle(msgdata)
}

// 注册服务器 的消息
func (this *AppClient)RegisterServerMsg(){
	this.netmsgsys.RegisterMsgHandle(cmdconst.Main_Account, cmdaccount.Sub_LS_C_RegisterAccount, OnRegisterAccountHanlder)
}

