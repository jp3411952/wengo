/*
创建时间: 2020/2/17
作者: zjy
功能介绍:

*/

package apploginsv

import (
	"github.com/golang/protobuf/proto"
	"github.com/wengo/cmdconst"
	"github.com/wengo/cmdconst/accountcmd"
	"github.com/wengo/network"
	"github.com/wengo/protobuf/pb/common_proto"
	"github.com/wengo/protobuf/pb/login_proto"
	"github.com/wengo/xlog"
	"regexp"
	"strings"
)


const(
	RegisterAccoutCode_Succeed   = 1  //注册成功
	RegisterAccoutCode_UserNameShort = 2 // 账号过短 >=4
	RegisterAccoutCode_UserNameLong  = 3 // 账号超长 <= 11
	RegisterAccoutCode_PasswordShort = 4 // 密码过短 >=6
	RegisterAccoutCode_PasswordLong = 5 // 密码过短 <=11
)

func SendRegisterAccountToClient(conn network.Conner,code int32)  {
	restcode := &common_proto.RestInt32CodeMsg{
		ResCode: code,
	}
	//返回测试数据
	erro := conn.WritePBMsg(cmdconst.Main_Account, accountcmd.Sub_LS_C_RegisterAccount, restcode)
	if erro != nil {
		xlog.ErrorLogNoInScene("SendRegisterAccountToClient %v",erro)
	}
}
//客户端请求注册账号
func RegisterAccountMsgHandler(conn network.Conner,msgdata []byte) error{
	reqCreatePlyer := &login_proto.ReqRegisterAccoutMsg{}
	erro := proto.Unmarshal(msgdata,reqCreatePlyer)
	if erro != nil {
		xlog.ErrorLogNoInScene("RegisterAccountMsgHandler %v", erro)
		return erro
	}
	
	re,erro := regexp.Compile("[\\s]*|[\\W]*")
	if  erro != nil{
	}
	//账号包含空格或者非单词字符
	if re.MatchString(reqCreatePlyer.Username) {
		SendRegisterAccountToClient(conn,RegisterAccoutCode_UserNameShort)
		return nil
	}
	
	if reqCreatePlyer.Username == ""{
		SendRegisterAccountToClient(conn,RegisterAccoutCode_UserNameShort)
		return nil
	}
	findIndex := strings.Index(reqCreatePlyer.Username," ")
	if findIndex != -1 {
		
		return  nil
	}
	//验证数据
	//验证账号是否合法
	//发送到dbServer 去验证 拉取用户账号信息
	
	
	erro = WorldServerHandler.WorldsvConn.WritePBMsg(cmdconst.Main_DataCenter,accountcmd.Sub_LS_C_RegisterAccount,reqCreatePlyer)
	// 查询内存中是否有这个注册用户
	xlog.ErrorLogNoInScene( "RegisterAccountMsgHandler  reqCreatePlyer.Username  =%v", reqCreatePlyer.Username)
	return  nil
}

//登陆账号
func LoginAccountMsgHandler(conn network.Conner,msgdata []byte) error{
	reqCreatePlyer := &login_proto.ReqLoginMsg{}
	erro := proto.Unmarshal(msgdata,reqCreatePlyer)
	if erro != nil {
		xlog.ErrorLogNoInScene( "LoginAccountMsgHandler %v", erro)
		return erro
	}

	
	
	
	return  nil
}
