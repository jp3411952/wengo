/*
创建时间: 2020/3/3
作者: zjy
功能介绍:
数据库逻辑封装读写分离
*/

package dbsys

import (
	"database/sql"
	"errors"
	"fmt"
	_ "github.com/go-sql-driver/mysql"
	"github.com/panjf2000/ants"
	"github.com/wengo/csvdata"
	"github.com/wengo/dispatch"
	"github.com/wengo/xlog"
	"github.com/wengo/xutil"
)

const (
	DBQueryEvent  = 1 // 查询事件
	DBExcuteEvent = 2  // 写事件
	DBEvent_max   = 3
)

// 封装数据库处理
type MySqlDBStore struct {
	db            *sql.DB
	dbConf        *csvdata.Dbconf
	quereyEvent   *dispatch.QueueEvent // 数据库查询队列
	writeEvent   *dispatch.QueueEvent // 数据库写队列
	eventDatapool *dispatch.EventDataPool
}

func NewMySqlDBStore(dbconf *csvdata.Dbconf, wpool *ants.Pool) *MySqlDBStore {
	if wpool == nil {
		return nil
	}
	dbstore := new(MySqlDBStore)
	dbstore.dbConf = dbconf
	
	if erro := dbstore.OpenDB(); erro != nil {
		xlog.ErrorLogNoInScene("open db error: %v ", erro)
		return nil
	}
	dbstore.eventDatapool = dispatch.NewEventDataPool()
	dbstore.quereyEvent = dispatch.NewQueueEvent(wpool)
	dbstore.writeEvent = dispatch.NewQueueEvent(wpool)
	//开多个线程操作数据库
	i := dbconf.Readnum
	for ; i > 0;i -- {
		dbstore.quereyEvent.AddEventDealer(dbstore.OnDBQuereyEvent)
	}
	//多个线程写
	w:= dbconf.Writenum
	for ; w > 0;w -- {
		dbstore.quereyEvent.AddEventDealer(dbstore.OnDBWriteEvent)
	}
	xlog.ErrorLogNoInScene("open db %v succeed", dbconf.Dbname)
	return dbstore
}

func (this *MySqlDBStore) OpenDB() error {
	if this.dbConf == nil {
		return errors.New("dbconf is nil")
	}
	DataSoureName := GetMysqlDataSourceName(this.dbConf)
	var Erro error
	this.db, Erro = sql.Open("mysql", DataSoureName)
	if xutil.IsError(Erro) {
		return Erro
	}
	this.db.SetMaxOpenConns(this.dbConf.Maxopenconns)
	this.db.SetMaxIdleConns(this.dbConf.Maxidleconns)
	if erro := this.db.Ping(); xutil.IsError(erro) {
		this.CloseDB()
		return erro
	}
	return Erro
}

// 关闭数据库
func (this *MySqlDBStore) CloseDB() {
	 erro := this.db.Close()
	if erro != nil {
		xlog.ErrorLogNoInScene("CloseDB %v",erro)
	}
	 //退出
	this.quereyEvent.Release()
	this.writeEvent.Release()
	xlog.ErrorLogNoInScene("CloseDB %v",this.dbConf)
}



// 异步查询
//@param cbDispSys 查询回调调度器，这里为了方便选择哪个线程回调方法
func (this *MySqlDBStore) AsyncQuery(cbSys *dispatch.DispatchSys,dbcb dispatch.DBQueryCallback, query string) {
	if query == "" {
		xlog.ErrorLogNoInScene("AsyncQuery  query == nil")
	}
	data := this.eventDatapool.GetDisPatchDataByPool(DBQueryEvent, &dispatch.DBQueryEventData{
		CbDispSys : cbSys,
		Cb:         dbcb,
		Querystr:   query,
	})
	this.quereyEvent.AddEvent(data)
}

// 异步写
//dbcb 回调方法
func (this *MySqlDBStore) AsynExtute(cbSys *dispatch.DispatchSys,dbcb dispatch.DBExcuteCallback, query string) {
	data := this.eventDatapool.GetDisPatchDataByPool(DBExcuteEvent, &dispatch.DBExcuteEventData{
		CbDispSys : cbSys,
		Cb:         dbcb,
		Excutestr:  query,
	})
	this.writeEvent.AddEvent(data)
}

//查询事件处理
func (this *MySqlDBStore) OnDBQuereyEvent(eventdata *dispatch.EventData) {
	queryEvent,ok:= eventdata.Val.(*dispatch.DBQueryEventData)
	if !ok {
		xlog.ErrorLogNoInScene("OnDBQuereyEvent Assert *DBQueryEventData")
		return
	}
	row,erro := this.Query(queryEvent.Querystr)
	if erro != nil {
		xlog.ErrorLogNoInScene("OnDBQuereyEvent erro = %v", erro)
		return
	}
	if  queryEvent.CbDispSys == nil || queryEvent.Cb == nil {
		xlog.DebugLogNoInScene("OnDBQuereyEvent 调度事件=nil 或者回调 = nil 就不向逻辑队列投递事件了")
		return
	}
	//进入调度队列
	onEventErro := queryEvent.CbDispSys.OnDBQuerey(&dispatch.DBQueryData{
		Cb:queryEvent.Cb,
		Rows:row,
	})
	if onEventErro != nil {
		xlog.ErrorLogNoInScene("投递查询事件 %v",onEventErro)
	}
}

//写事件处理
func (this *MySqlDBStore) OnDBWriteEvent(eventdata *dispatch.EventData) {
	queryEvent,ok:= eventdata.Val.(*dispatch.DBExcuteEventData)
	if !ok {
		xlog.ErrorLogNoInScene("OnDBWriteEvent Assert *DBQueryEventData")
		return
	}
	result,erro := this.Excute(queryEvent.Excutestr)
	if erro != nil {
		xlog.ErrorLogNoInScene("OnDBWriteEvent erro = %v", erro)
		return
	}
	if  queryEvent.CbDispSys == nil || queryEvent.Cb == nil {
		xlog.DebugLogNoInScene("OnDBWriteEvent 调度事件=nil 或者回调 = nil 就不向逻辑队列投递事件了")
		return
	}
	//进入调度队列
	onEventErro := queryEvent.CbDispSys.OnDBWrite(&dispatch.DBExcuteData{
		Cb:queryEvent.Cb,
		Result:result,
	})
	if onEventErro != nil {
		xlog.ErrorLogNoInScene("投递查询事件 %v",onEventErro)
	}
}

func (this *MySqlDBStore) Query(query string, args ...interface{}) (row *sql.Rows, erro error) {
	row, erro = this.db.Query(query, args ...)
	if erro != nil {
		xlog.DebugLogNoInScene( " db.Excutestr erro %v", erro)
		erro = row.Close()
		return
	}
	// erro = row.Close() 解析完数据才能关闭
	return
}

func (this *MySqlDBStore) Excute(query string, args ...interface{}) (result sql.Result, err error) {
	result, err = this.db.Exec(query, args ...)
	if err != nil {
		xlog.DebugLogNoInScene( " db.Exec erro %v", err)
	}
	return
}

func (this *MySqlDBStore) CheckTableExists(tableName string) bool {
	if this.db == nil {
		fmt.Println("CheckTableExists this.db is nil")
		return false
	}
	rows, erro := this.db.Query("SELECT t.TABLE_NAME FROM information_schema.TABLES AS t WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ", this.dbConf.Dbname, tableName)
	if xutil.IsError(erro) {
		return false
	}
	if rows.Next() {
		return true
	}
	return false
}
