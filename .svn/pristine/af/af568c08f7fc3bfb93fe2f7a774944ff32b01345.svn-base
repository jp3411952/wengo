/*
创建时间: 2020/7/18
作者: zjy
功能介绍:

*/

package dispatch

import (
	"errors"
)

// 服务器网络读取事件
func (this *DispatchSys) OnDBQuerey(querydata *DBQueryData) error {
	if this.endFlag.IsTrue() {
		return  errors.New("OnDBQuerey已经关闭调度系统")
	}
	data := this.eventDatapool.GetDisPatchDataByPool(DBQuerey_Event, querydata)
	if data == nil {
		return errors.New("OnDBQuerey data nil")
	}
	this.qet.AddEvent(data)
	return nil
}

// 服务器网络关闭事件
func (this *DispatchSys) OnDBWrite(excuteData *DBExcuteData) error {
	if this.endFlag.IsTrue() {
		return  errors.New("OnDBWrite已经关闭调度系统")
	}
	data := this.eventDatapool.GetDisPatchDataByPool(DBWrite_Event,excuteData)
	if data == nil {
		return errors.New("OnDBWrite data nil")
	}
	this.qet.AddEvent(data)
	return nil
}

// 数据库回调事件
func (this *DispatchSys) NoticeDBQuerey(val interface{}) error {
	quereyData,ok:= val.(DBQueryData)
	if !ok {
		return errors.New("NoticeDBQuerey DBExcuteData type Erro")
	}
	if quereyData.Cb == nil{
		return  errors.New("NoticeDBQuerey quereyData.Cb is nil")
	}
	return quereyData.Cb (quereyData.Rows)
}

func (this *DispatchSys) NoticeDBWrite(val interface{}) error {
	excuteData,ok:= val.(DBExcuteData)
	if !ok {
		return errors.New("NoticeDBWrite DBExcuteData type Erro")
	}
	if excuteData.Cb == nil{
		return  errors.New("NoticeDBWrite excuteData.Cb is nil")
	}
	return excuteData.Cb (excuteData.Result)
}

// redis回调事件
func (this *DispatchSys) OnRedisResultEvnet(val interface{}) error {
	
	return  nil
}

