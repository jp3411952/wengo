package datacenter

import (
	"container/list"
	"github.com/wengo/model"
	"github.com/wengo/model/dbmodels"
	"github.com/wengo/xutil/timeutil"
)

//账号管理
type AccountMgr struct {
	UserNameAccountMap map[string]*model.Account //使用账号
	AccountsByMacMap   map[string]uint8              //单台机器只能注册10个号
	pDelAccountsList   *list.List
}

func NewAccountsMgr() *AccountMgr {
	pAccountMgr := new(AccountMgr)
	pAccountMgr.UserNameAccountMap = make(map[string]*model.Account)
	pAccountMgr.AccountsByMacMap = make(map[string]uint8)
	pAccountMgr.pDelAccountsList = list.New()
	return pAccountMgr
}

//向管理类添加账号
func (this *AccountMgr) AddAccunts(dbAccounts *dbmodels.Accounts) bool {
	if dbAccounts == nil  || dbAccounts.LoginName == "" {
		return false
	}
	paccount := model.NewAccount(dbAccounts)
	now := timeutil.NowAddDate(0,0,7) //设置7天后过期
	paccount.SetExprationTime(now.Unix())
	this.UserNameAccountMap[dbAccounts.LoginName] = paccount
	return  true
}

//获取账号信息
func (this *AccountMgr) GetAccountByUserName(username string) *model.Account {
	return this.UserNameAccountMap[username]
}

//更具Mac地址获取账号数量
func (this *AccountMgr) GetMacCreateAccount(macStr string) uint8 {
	num,ok := this.AccountsByMacMap[macStr]
	if !ok {
		return 0
	}
	return num
}
//更具ip获取账号数量
func (this *AccountMgr)SetMacCreateAccountNum(macStr string,num uint8)  {
	this.AccountsByMacMap[macStr] = num
}

//定时删除
func (this *AccountMgr)DelAccountOnTimer()  {
	//没有数据就不处理
	if this.pDelAccountsList.Len() == 0 {
		return
	}
	var n *list.Element  //下一个数据的变量临时存放
	for item := this.pDelAccountsList.Front();nil != item ;item = n {
		account,ok :=  item.Value.(*model.Account)
		if !ok {
			return
		}
		if account.ExprationTime() > timeutil.GetCurrentTimeS()  { //这个没有过期证明后面的也没有过期直接返回
			return
		}
		//没有在线 才清除
		if !account.AccountIsOnline() {
			n = item.Next() //保存下一个数据
			this.pDelAccountsList.Remove(item)
		}
	}
	

}