/*
创建时间: 2020/08/2020/8/25
作者: Administrator
功能介绍:
账号池,池子数量主要是针对并发数,当并发不高时就很节约
*/
package datacenter

import "sync"

type DBAccountPool struct {
	items  []*DBAccount
	head   int   //队头
	tail   int   //队尾
	size   int   //长度
	isFull bool  //是否满的标志
	lock sync.Mutex
}

func NewDBAccountPool(size int) *DBAccountPool {
	return &DBAccountPool{
		items: make([]*DBAccount, size),
		size:  size,
	}
}

func (this *DBAccountPool) isEmpty() bool {
	return  this.head == this.tail && !this.isFull
}

func (this *DBAccountPool) Recycle(data *DBAccount) {
	this.lock.Lock()
	if this.size == 0 { //重置了队列就不能回收了
		this.lock.Unlock()
		return
	}
	if this.isFull { //满了也不能再回收了
		this.lock.Unlock()
		return
	}
	data.Reset()
	//往尾部放数据
	this.items[this.tail] = data
	this.tail++
	//如果是最后一位,那么下次放又要从开始的位置
	if this.tail == this.size {
		this.tail = 0
	}
	//如果头与尾位置相同证明没有位置放了代表数据满了
	if this.tail == this.head {
		this.isFull = true
	}
	this.lock.Unlock()
	return
}

//从池子里面取出数据
func (this *DBAccountPool) Pop() *DBAccount {
	this.lock.Lock()
	if this.isEmpty() { //池子里面没有数据就不能取了
		this.lock.Unlock()
		return new(DBAccount)
	}
	//头部取数据
	w := this.items[this.head]
	this.head++ //取了向后移动
	if this.head == this.size {
		this.head = 0
	}
	this.isFull = false
	this.lock.Unlock()
	return w
}

func (this *DBAccountPool) Reset() {
	this.lock.Lock()
	if this.isEmpty() {
		this.lock.Unlock()
		return
	}
	this.lock.Unlock()

Releasing:
	if w := this.Pop(); w != nil {
		goto Releasing
	}
	this.items = this.items[:0]
	this.size = 0
	this.head = 0
	this.tail = 0
}
