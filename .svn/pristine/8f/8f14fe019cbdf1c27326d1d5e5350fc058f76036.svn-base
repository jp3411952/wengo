/*
创建时间: 2020/08/2020/8/25
作者: Administrator
功能介绍:
投递到数据库的参数
由于数据库系统依赖调度系统,所以只有定义这边,定义在数据那边会出现包的循环引用
*/
package dispatch

import (
	"database/sql"
	"sync"
)

//玩家标识
type PlayerMark struct {
	MarkID       uint64
	ClientConnID uint32 //网络连接id
	ServerConnID uint32 //服务器连接对象

}

//数据库查询事件需要参数
type DBEventParam struct {
	PlyMark   PlayerMark
	DBRestCode   int32  //返回的结果码
	CbDispSys *DispatchSys //回调系统确定 回调方法的调度协程
	DBParam   interface{}  //传入的需要的参数
	//根据不同的数据使用不同的对象
	ReflectObj interface{}   //返回的反射对象
	Objs       []interface{} //返回结构体数组对象
	StrRows    [][]string    //返回的字符串二维切片结果
	StrRow     []string      //返回的字符串切片结果
	DBRows     *sql.Rows     //返回的原始结果集
}

//重置变量
func (this *DBEventParam) Reset() {
	this.PlyMark.MarkID = 0
	this.PlyMark.ClientConnID = 0
	this.PlyMark.ServerConnID = 0
	this.DBRestCode = 0
	this.CbDispSys = nil
	this.DBParam = nil
	this.ReflectObj = nil
	this.Objs = nil
	this.StrRows = nil
	this.StrRow = nil
	this.DBRows = nil
}

type DBEventParamPool struct {
	items  []*DBEventParam
	head   int  //队头
	tail   int  //队尾
	size   int  //长度
	isFull bool //是否满的标志
	lock   sync.Mutex
}

func NewDBEventParamPool(size int) *DBEventParamPool {
	return &DBEventParamPool{
		items: make([]*DBEventParam, size),
		size:  size,
	}
}

func (this *DBEventParamPool) isEmpty() bool {
	isEmpty := this.head == this.tail && !this.isFull
	return isEmpty
}

func (this *DBEventParamPool) Recycle(data *DBEventParam) {
	this.lock.Lock()
	if this.size == 0 { //重置了队列就不能回收了
		this.lock.Unlock()
		return
	}
	if this.isFull { //满了也不能再回收了
		this.lock.Unlock()
		return
	}
	data.Reset()
	//往尾部放数据
	this.items[this.tail] = data
	this.tail++
	//如果是最后一位,那么下次放又要从开始的位置
	if this.tail == this.size {
		this.tail = 0
	}
	//如果头与尾位置相同证明没有位置放了代表数据满了
	if this.tail == this.head {
		this.isFull = true
	}
	this.lock.Unlock()
	return
}

//从池子里面取出数据
func (this *DBEventParamPool) Pop() *DBEventParam {
	this.lock.Lock()
	if this.isEmpty() { //池子里面没有数据就不能取了
		this.lock.Unlock()
		return new(DBEventParam)
	}
	//头部取数据
	w := this.items[this.head]
	this.head++ //取了向后移动
	if this.head == this.size {
		this.head = 0
	}
	this.isFull = false
	this.lock.Unlock()
	return w
}

func (this *DBEventParamPool) Reset() {
	this.lock.Lock()
	if this.isEmpty() {
		this.lock.Unlock()
		return
	}
	this.lock.Unlock()

Releasing:
	if w := this.Pop(); w != nil {
		goto Releasing
	}
	this.items = this.items[:0]
	this.size = 0
	this.head = 0
	this.tail = 0
}
